'use strict';

var range = require('lodash.range');
var random = require('lodash.random');
var shuffle = require('lodash.shuffle');
var color = require('./color');
var sets = require('./sets');

var availableNodes = sets.names.map(function (name) {
    return { id: name };
});

var getNodeTargets = function getNodeTargets(id, links, currentPath) {
    var targets = links.filter(function (_ref) {
        var source = _ref.source;
        return source === id;
    }).map(function (_ref2) {
        var target = _ref2.target;

        if (target === id) {
            throw new Error('[sankey] a node cannot be linked on itself:\n  link: ' + id + ' \u2014> ' + id);
        }
        if (currentPath && currentPath.includes(target)) {
            throw new Error('[sankey] found cyclic dependency:\n  link: ' + currentPath.join(' â€”> ') + ' \u2014> ' + target);
        }
        return target;
    });

    return targets.reduce(function (acc, targetId) {
        return acc.concat(getNodeTargets(targetId, links, currentPath ? [].concat(currentPath, [targetId]) : [id, targetId]));
    }, targets);
};

var getNodesTargets = function getNodesTargets(links) {
    return links.reduce(function (targetsById, link) {
        if (!targetsById[link.source]) {
            targetsById[link.source] = getNodeTargets(link.source, links);
        }

        return targetsById;
    }, {});
};

module.exports = function () {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        nodeCount = _ref3.nodeCount,
        _ref3$maxIterations = _ref3.maxIterations,
        maxIterations = _ref3$maxIterations === undefined ? 3 : _ref3$maxIterations;

    var nodes = availableNodes.slice(0, nodeCount).map(function (node) {
        return Object.assign({}, node, {
            color: color.randColor()
        });
    });

    var links = [];
    shuffle(nodes).forEach(function (_ref4) {
        var id = _ref4.id;

        range(random(1, maxIterations)).forEach(function () {
            var targetsById = getNodesTargets(links);
            var randId = shuffle(nodes.filter(function (n) {
                return n.id !== id;
            }).map(function (n) {
                return n.id;
            }))[0];
            if ((!targetsById[randId] || !targetsById[randId].includes(id)) && (!targetsById[id] || !targetsById[id].includes(randId))) {
                links.push({
                    source: id,
                    target: randId,
                    value: random(5, 200)
                });
            }
        });
    });

    return { nodes: nodes, links: links };
};