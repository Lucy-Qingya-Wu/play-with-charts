var range = require('lodash.range');
var random = require('lodash.random');
var shuffle = require('lodash.shuffle');

var _require = require('d3-time'),
    timeDays = _require.timeDays;

var _require2 = require('d3-time-format'),
    timeFormat = _require2.timeFormat;

var color = require('./color');
var sets = require('./sets');

exports.sets = sets;
exports.randColor = color.randColor;

exports.generateProgrammingLanguageStats = function () {
    var shouldShuffle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

    var langs = sets.programmingLanguages;
    if (shouldShuffle) {
        langs = shuffle(langs);
    }
    if (limit < 1) {
        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1));
    }

    return langs.slice(0, limit).map(function (language) {
        return {
            label: language,
            value: Math.round(Math.random() * 600),
            color: exports.randColor()
        };
    });
};

exports.uniqRand = function (generator) {
    var used = [];

    return function () {
        var value = void 0;
        do {
            value = generator.apply(undefined, arguments);
        } while (used.includes(value));

        used.push(value);

        return value;
    };
};

exports.randCountryCode = function () {
    return shuffle(sets.countryCodes)[0];
};

exports.generateDrinkStats = function () {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;

    var rand = function rand() {
        return random(0, 60);
    };
    var types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac'];
    var country = exports.uniqRand(exports.randCountryCode);

    var data = types.map(function (id) {
        return {
            id: id,
            color: exports.randColor(),
            data: []
        };
    });

    range(size).forEach(function () {
        var x = country();
        types.forEach(function (id) {
            data.find(function (d) {
                return d.id === id;
            }).data.push({
                color: exports.randColor(),
                x: x,
                y: rand()
            });
        });
    });

    return data;
};

exports.generateSerie = function () {
    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;

    var data = [];
    var max = 100 + Math.random() * (Math.random() * 600);

    for (var i = 0; i < length; i++) {
        data.push(Math.round(Math.random() * max));
    }

    return data;
};

exports.generateStackData = function () {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;

    var length = 16;
    return range(size).map(function () {
        return exports.generateSerie(length).map(function (v, i) {
            return { x: i, y: v };
        });
    });
};

exports.generateCountriesPopulation = function (size) {
    var countryCode = exports.uniqRand(exports.randCountryCode());

    return range(size).map(function () {
        return {
            country: countryCode(),
            population: 200 + Math.round(Math.random() * Math.random() * 1000000)
        };
    });
};

exports.generateDayCounts = function (from, to) {
    var maxSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.9;

    var days = timeDays(from, to);

    var size = Math.round(days.length * (maxSize * 0.4)) + Math.round(Math.random() * (days.length * (maxSize * 0.6)));

    var dayFormat = timeFormat('%Y-%m-%d');

    return shuffle(days).slice(0, size).map(function (day) {
        return {
            day: dayFormat(day),
            value: Math.round(Math.random() * 400)
        };
    });
};

exports.generateCountriesData = function (keys) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$size = _ref.size,
        size = _ref$size === undefined ? 12 : _ref$size,
        _ref$min = _ref.min,
        min = _ref$min === undefined ? 0 : _ref$min,
        _ref$max = _ref.max,
        max = _ref$max === undefined ? 200 : _ref$max,
        _ref$withColors = _ref.withColors,
        withColors = _ref$withColors === undefined ? true : _ref$withColors;

    return sets.countryCodes.slice(0, size).map(function (country) {
        var d = {
            country: country
        };
        keys.forEach(function (key) {
            d[key] = random(min, max);
            if (withColors === true) {
                d[key + 'Color'] = exports.randColor();
            }
        });

        return d;
    });
};

var libTreeItems = [['viz', [['stack', [['chart'], ['xAxis'], ['yAxis'], ['layers']]], ['pie', [['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]], ['legends']]]]], ['colors', [['rgb'], ['hsl']]], ['utils', [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']]], ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]], ['set', [['clone'], ['intersect'], ['merge'], ['reverse'], ['toArray'], ['toObject'], ['fromCSV'], ['slice'], ['append'], ['prepend'], ['shuffle'], ['pick'], ['plouc']]], ['text', [['trim'], ['slugify'], ['snakeCase'], ['camelCase'], ['repeat'], ['padLeft'], ['padRight'], ['sanitize'], ['ploucify']]], ['misc', [['whatever', [['hey'], ['WTF'], ['lol'], ['IMHO']]], ['other'], ['crap', [['crapA'], ['crapB', [['crapB1'], ['crapB2'], ['crapB3'], ['crapB4']]], ['crapC', [['crapC1'], ['crapC2'], ['crapC3'], ['crapC4'], ['crapC5'], ['crapC6'], ['crapC7'], ['crapC8'], ['crapC9']]]]]]]];

exports.generateLibTree = function () {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'nivo';
    var limit = arguments[1];
    var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : libTreeItems;

    limit = limit || children.length;
    if (limit > children.length) {
        limit = children.length;
    }

    var tree = {
        name: name,
        color: exports.randColor()
    };
    if (children && children.length > 0) {
        tree.children = range(limit).map(function (o, i) {
            var leaf = children[i];

            // full path `${name}.${leaf[0]}`
            return exports.generateLibTree(leaf[0], null, leaf[1] || []);
        });
    } else {
        tree.loc = Math.round(Math.random() * 200000);
    }

    return tree;
};

var wines = ['chardonay', 'carmenere', 'syrah'];
var wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny'];
exports.generateWinesTastes = function () {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$randMin = _ref2.randMin,
        randMin = _ref2$randMin === undefined ? 20 : _ref2$randMin,
        _ref2$randMax = _ref2.randMax,
        randMax = _ref2$randMax === undefined ? 120 : _ref2$randMax;

    var data = wineTastes.map(function (taste) {
        var d = { taste: taste };
        wines.forEach(function (wine) {
            d[wine] = random(randMin, randMax);
        });

        return d;
    });

    return { data: data, keys: wines };
};

exports.generateSankeyData = require('./sankey');
exports.generateChordData = require('./chord');